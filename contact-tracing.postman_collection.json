{
	"info": {
		"_postman_id": "f7d38255-dd26-4eaa-8f02-9813d087d118",
		"name": "Contact Tracing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Healthcheck",
			"item": [
				{
					"name": "API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9ac0cc0-0624-4b49-a79c-5e6607e0fe0b",
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/healthcheck",
							"host": [
								"{{api}}"
							],
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42116d28-40e3-468b-87f5-ce6d450d169e",
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{push}}/healthcheck",
							"host": [
								"{{push}}"
							],
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Registration",
			"item": [
				{
					"name": "Register account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e0c3991-5c78-4136-8630-6b946139e7d7",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'nonce'",
									"  ],",
									"  properties: {",
									"    nonce: {",
									"      type: 'string'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('nonce', json.nonce)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f51b7e9-a210-4736-993c-b91db5f4f482",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'refreshToken',",
									"    'token'",
									"  ],",
									"  properties: {",
									"    refreshToken: {",
									"      type: 'string'",
									"    },",
									"    token: {",
									"      type: 'string'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('refreshToken', json.refreshToken)",
									"pm.environment.set('token', json.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "nonce",
									"value": "{{nonce}}",
									"type": "text"
								},
								{
									"key": "deviceVerificationPayload",
									"value": "{{registerToken}}",
									"type": "text"
								},
								{
									"key": "platform",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api}}/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "69a7994f-c8b8-458b-849a-33d9d0b90668",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1cad0220-584d-499d-80be-e95196ee46bd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1d1d2d6-2a04-47e7-a24d-270b1d66bf03",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'token'",
									"  ],",
									"  properties: {",
									"    token: {",
									"      type: 'string'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('token', json.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/refresh",
							"host": [
								"{{api}}"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data",
			"item": [
				{
					"name": "Get all settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "877a7187-c653-4c19-ba71-e33676fa2f4f",
								"exec": [
									"const schema = {",
									"    type: 'object',",
									"    additionalProperties: true,",
									"    required: [",
									"        'generatedAt'",
									"    ],",
									"    properties: {",
									"        generatedAt: {",
									"            type: 'string',",
									"            format: 'date-time'",
									"        }",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/settings",
							"host": [
								"{{api}}"
							],
							"path": [
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get exposures settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b59e098-9480-4c10-b451-6e9773c950c9",
								"exec": [
									"const schema = {",
									"    type: 'object',",
									"    additionalProperties: true,",
									"    required: [",
									"        'generatedAt'",
									"    ],",
									"    properties: {",
									"        generatedAt: {",
									"            type: 'string',",
									"            format: 'date-time'",
									"        }",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/settings/exposures",
							"host": [
								"{{api}}"
							],
							"path": [
								"settings",
								"exposures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get language settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75bdd26b-0b50-4aa4-88b1-05b0c5bb6b24",
								"exec": [
									"const schema = {",
									"    type: 'object',",
									"    additionalProperties: true,",
									"    required: [",
									"        'generatedAt'",
									"    ],",
									"    properties: {",
									"        generatedAt: {",
									"            type: 'string',",
									"            format: 'date-time'",
									"        }",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/settings/language",
							"host": [
								"{{api}}"
							],
							"path": [
								"settings",
								"language"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46f3a666-e08b-421b-bf54-3b44e54e730f",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'generatedAt',",
									"    'checkIns',",
									"    'installs',",
									"    'statistics',",
									"    'chart',",
									"    'counties',",
									"    'currentCases',",
									"    'hospitalised',",
									"    'requiredICU'",
									"  ],",
									"  properties: {",
									"    generatedAt: {",
									"      type: 'string',",
									"      format: 'date-time'",
									"    },",
									"    checkIns: {",
									"      type: 'object',",
									"      additionalProperties: false,",
									"      required: [",
									"        'total',",
									"        'ok'",
									"      ],",
									"      properties: {",
									"        total: {",
									"          type: 'integer'",
									"        },",
									"        ok: {",
									"          type: 'integer'",
									"        }",
									"      }",
									"    },",
									"    installs: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string'",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    statistics: {",
									"      type: 'object',",
									"      additionalProperties: false,",
									"      required: [",
									"        'confirmed',",
									"        'deaths',",
									"        'recovered',",
									"        'hospitalised',",
									"        'requiredICU',",
									"        'transmission',",
									"        'lastUpdated'",
									"      ],",
									"      properties: {",
									"        confirmed: {",
									"          type: 'integer'",
									"        },",
									"        deaths: {",
									"          type: 'integer'",
									"        },",
									"        recovered: {",
									"          type: 'integer'",
									"        },",
									"        hospitalised: {",
									"          type: 'integer'",
									"        },",
									"        requiredICU: {",
									"          type: 'integer'",
									"        },",
									"        transmission: {",
									"          type: 'object',",
									"          additionalProperties: false,",
									"          required: [",
									"            'community',",
									"            'closeContact',",
									"            'travelAbroad'",
									"          ],",
									"          properties: {",
									"            community: {",
									"              type: 'integer'",
									"            },",
									"            closeContact: {",
									"              type: 'integer'",
									"            },",
									"            travelAbroad: {",
									"              type: 'integer'",
									"            }",
									"          }",
									"        },",
									"        lastUpdated: {",
									"          type: 'object',",
									"          additionalProperties: false,",
									"          required: [",
									"            'stats',",
									"            'profile'",
									"          ],",
									"          properties: {",
									"            stats: {",
									"              type: 'string',",
									"              format: 'date-time'",
									"            },",
									"            profile: {",
									"              type: 'string',",
									"              format: 'date-time'",
									"            }",
									"          }",
									"        }",
									"      }",
									"    },",
									"    chart: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string'",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    counties: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'object',",
									"        additionalProperties: false,",
									"        required: [",
									"          'county',",
									"          'cases'",
									"        ],",
									"        properties: {",
									"          county: {",
									"            type: 'string'",
									"          },",
									"          cases: {",
									"            type: 'integer'",
									"          }",
									"        }",
									"      }",
									"    },",
									"    currentCases: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string',",
									"            'null'",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    hospitalised: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string',",
									"            'null'",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    requiredICU: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string',",
									"            'null'",
									"          ]",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/stats",
							"host": [
								"{{api}}"
							],
							"path": [
								"stats"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check-in",
			"item": [
				{
					"name": "Check-in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a967b987-d460-4cfa-9577-78873acb0bb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e38f45f0-72f1-4e4d-a90b-f9ef66425d96",
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ok\": true,\n    \"gender\": \"u\",\n    \"sexualOrientation\": \"u\",\n    \"race\": \"u\",\n    \"ethnicity\": \"u\",\n    \"disabilityStatus\": \"u\",\n    \"ageRange\": \"u\",\n    \"county\": \"u\",\n    \"state\": \"u\",\n    \"data\": [\n        {\n            \"fever\": 0,\n            \"feverish\": 0,\n            \"cough\": 0,\n            \"breath\": 0,\n            \"fatigue\": 0,\n            \"throat\": 0,\n            \"aches\": 0,\n            \"headache\": 0,\n            \"nausea\": 0,\n            \"diarrhea\": 0,\n            \"taste\": 0,\n            \"date\": \"16/09/2020\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/check-in",
							"host": [
								"{{api}}"
							],
							"path": [
								"check-in"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publish keys (token)",
			"item": [
				{
					"name": "Notify positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba8ffa7-35b5-468c-8d31-f29ba44044f2",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'code', 'error', 'expiresAt', 'expiresAtTimestamp'",
									"  ],",
									"  properties: {",
									"    code: {",
									"      type: 'string'",
									"    },",
									"    error: {",
									"      type: 'string'",
									"    },",
									"    expiresAt: {",
									"      type: 'string'",
									"    },",
									"    expiresAtTimestamp: {",
									"      type: 'string'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"const control = CryptoJS.SHA512(json.code.toString().substr(0, Math.floor(json.code.length / 2))).toString(CryptoJS.enc.Hex)",
									"const code = CryptoJS.SHA512(json.code.toString()).toString(CryptoJS.enc.Hex)",
									"",
									"pm.environment.set('uploadHash', `${control}${code}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{pushToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"onsetDate\": \"2020-09-01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								},
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{push}}/notify/positive",
							"host": [
								"{{push}}"
							],
							"path": [
								"notify",
								"positive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7c91cf7-0907-4c62-9a76-60185cb0e20a",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'token'",
									"  ],",
									"  properties: {",
									"    token: {",
									"      type: 'string',",
									"      format: 'uuid'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('uploadToken', json.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hash\": \"{{uploadHash}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/exposures/verify",
							"host": [
								"{{api}}"
							],
							"path": [
								"exposures",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "342267d1-3f51-4ac7-b15a-4ff3d04a1bd9",
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Chaff",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{uploadToken}}\",\n    \"platform\": \"test\",\n    \"deviceVerificationPayload\": \"{{registerToken}}\",\n    \"exposures\": [\n        {\n            \"transmissionRiskLevel\": 0,\n            \"rollingStartNumber\": 2665925,\n            \"rollingPeriod\": 144,\n            \"key\": \"pKv1raYbAfP9XdvDd26k7w==\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/exposures",
							"host": [
								"{{api}}"
							],
							"path": [
								"exposures"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publish keys (certificate)",
			"item": [
				{
					"name": "Issue code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86ceda87-6782-46d8-a129-f5292f43b418",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'code', 'error', 'expiresAt', 'expiresAtTimestamp'",
									"  ],",
									"  properties: {",
									"    code: {",
									"      type: 'string'",
									"    },",
									"    error: {",
									"      type: 'string'",
									"    },",
									"    expiresAt: {",
									"      type: 'string'",
									"    },",
									"    expiresAtTimestamp: {",
									"      type: 'string'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('code', json.code.toString())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{pushToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"onsetDate\": \"2020-09-01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								},
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{push}}/issue",
							"host": [
								"{{push}}"
							],
							"path": [
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exchange code for token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "018156b6-c914-4cb9-ab87-cfae0e8dd459",
								"exec": [
									"const schema = {\r",
									"  type: 'object',\r",
									"  additionalProperties: false,\r",
									"  required: [\r",
									"    'testtype', 'symptomDate', 'token', 'error'\r",
									"  ],\r",
									"  properties: {\r",
									"    testtype: {\r",
									"      type: 'string',\r",
									"      enum: ['confirmed', 'likely', 'negative']\r",
									"    },\r",
									"    symptomDate: {\r",
									"      type: 'string',\r",
									"      format: 'date'\r",
									"    },\r",
									"    token: {\r",
									"      type: 'string'\r",
									"    },\r",
									"    error: {\r",
									"      type: 'string'\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									"const json = pm.response.json()\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test('Schema is valid', () => {\r",
									"  pm.expect(tv4.validate(json, schema)).to.be.true\r",
									"})\r",
									"\r",
									"pm.environment.set('certificateToken', json.token.toString())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"accept\": [\"confirmed\", \"likely\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/verify",
							"host": [
								"{{api}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exchange token for certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4297b6a8-1fe5-4644-863f-d5c7ff456a95",
								"exec": [
									"const schema = {\r",
									"  type: 'object',\r",
									"  additionalProperties: false,\r",
									"  required: [\r",
									"    'certificate', 'error'\r",
									"  ],\r",
									"  properties: {\r",
									"    certificate: {\r",
									"      type: 'string'\r",
									"    },\r",
									"    error: {\r",
									"      type: 'string'\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									"const json = pm.response.json()\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test('Schema is valid', () => {\r",
									"  pm.expect(tv4.validate(json, schema)).to.be.true\r",
									"})\r",
									"\r",
									"pm.environment.set('certificate', json.certificate.toString())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{certificateToken}}\",\r\n    \"ekeyhmac\": \"b0lYY5gs0YF/q4jzGNutUW3VC+/kjaew0Z49abCbuow=\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/certificate",
							"host": [
								"{{api}}"
							],
							"path": [
								"certificate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20e4f4f6-c6c8-410b-913f-3affc2734b3d",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Chaff",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hmackey\": \"Hlk2qujs/iOU+fC0rEQjV01yQLBmHN1uPun1KkS4XnMUcZzgc7QHh5q3H4lKxp7Z4RgBAJwjIc5yP2fhEnG7Hwro+RSlAHjIldconkWuikmfkQo9Gp0sZbhXQ1YHkWyzI+KdTyiHCbHHkHldca8aJhnl+8XKWiWpSvVmlb3UxhU=\",\n    \"verificationPayload\": \"{{certificate}}\",\n    \"appPackageName\": \"{{appPackageName}}\",\n    \"platform\": \"test\",\n    \"deviceVerificationPayload\": \"{{registerToken}}\",\n    \"regions\": [\n        \"IE\"\n    ],\n    \"temporaryExposureKeys\": [\n        {\n            \"key\": \"2xOlJihn9QFmntuACpslVg==\",\n            \"rollingPeriod\": 144,\n            \"rollingStartNumber\": 2663856,\n            \"transmissionRisk\": 0\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/publish",
							"host": [
								"{{api}}"
							],
							"path": [
								"publish"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Download keys",
			"item": [
				{
					"name": "List exposures",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49c9402c-c151-4a3c-af09-4613e8eadb3e",
								"exec": [
									"const schema = {",
									"  type: 'array',",
									"  additionalItems: false,",
									"  items: {",
									"    type: 'object',",
									"    additionalProperties: false,",
									"    required: [",
									"      'id',",
									"      'path'",
									"    ],",
									"    properties: {",
									"      id: {",
									"        type: 'integer'",
									"      },",
									"      path: {",
									"        type: 'string'",
									"      }",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('exposurePath', json[0].path)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/exposures?since=0",
							"host": [
								"{{api}}"
							],
							"path": [
								"exposures"
							],
							"query": [
								{
									"key": "since",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download exposures",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1ff0e25-de06-4b00-a3a0-10ae1bafb10c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/zip",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{exposurePath}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{exposurePath}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Callback",
			"item": [
				{
					"name": "Request callback",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"closeContactDate\": 1591005554175,\n\t\"mobile\": \"{{mobile}}\",\n\t\"payload\": {\n\t\t\"matchedKeys\": 3,\n        \"attenuations\": \"5,10,15\",\n        \"maxRiskScore\": 74\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/callback",
							"host": [
								"{{api}}"
							],
							"path": [
								"callback"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "Post event",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"event\": \"LOG_ERROR\",\r\n    \"os\": \"android\",\r\n    \"payload\": {\r\n        \"description\": \"APP_ERROR_3\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metrics",
							"host": [
								"{{api}}"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "List metrics",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{metricsToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{push}}/metrics?startDate=2020-07-06&endDate=2020-12-31",
							"host": [
								"{{push}}"
							],
							"path": [
								"metrics"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2020-07-06"
								},
								{
									"key": "endDate",
									"value": "2020-12-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List payloads",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{metricsToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/csv",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{push}}/payloads?startDate=2020-05-01&endDate=2020-09-31",
							"host": [
								"{{push}}"
							],
							"path": [
								"payloads"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2020-05-01"
								},
								{
									"key": "endDate",
									"value": "2020-09-31"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Forget",
			"item": [
				{
					"name": "Forget account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ec837ee-b4b6-475a-bdc4-6e15fe0b5401",
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Venues",
			"item": [
				{
					"name": "Submit email address",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"emailAddress\": \"jack.murdoch@nearform.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/email",
							"host": [
								"{{api}}"
							],
							"path": [
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify email address",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"emailAddress\": \"success@simulator.amazonses.com\",\r\n    \"verificationCode\": \"5663291\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/email",
							"host": [
								"{{api}}"
							],
							"path": [
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create venue",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiverEmail\": \"eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbEFkZHJlc3MiOiJzdWNjZXNzQHNpbXVsYXRvci5hbWF6b25zZXMuY29tIiwiaWF0IjoxNjAyNTk5MjM0LCJleHAiOjE2MDI1OTk4MzQsInN1YiI6ImVtYWlsQWRkcmVzcyJ9.CDgzZZvGsNstXX2o_SxsIcCgklNR6C-XTCY-U6oCQrjq2-wJrBUpcL__Kkp5zZz7L733g63L4RTfhFgSsHZa_w\",\r\n    \"receiverFirstName\": \"Test\",\r\n    \"receiverSurname\": \"Venue\",\r\n    \"venueType\": \"d86c1ea9-a2c2-42e6-a1eb-3277df636e39\",\r\n    \"venueName\": \"Test Venue\",\r\n    \"venueAddress\": \"Test Address\",\r\n    \"contactEmail\": \"success@simulator.amazonses.com\",\r\n    \"contactPhone\": \"+441234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/venues",
							"host": [
								"{{api}}"
							],
							"path": [
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get venue types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/venues/types",
							"host": [
								"{{api}}"
							],
							"path": [
								"venues",
								"types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get risky venues",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/venues/risky",
							"host": [
								"{{api}}"
							],
							"path": [
								"venues",
								"risky"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all venues",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/venues",
							"host": [
								"{{api}}"
							],
							"path": [
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flag venue as risky",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"start\": \"\",\n    \"end\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/venues/risky",
							"host": [
								"{{api}}"
							],
							"path": [
								"venues",
								"risky"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make venue non-risky",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/venues/risky",
							"host": [
								"{{api}}"
							],
							"path": [
								"venues",
								"risky"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update risky venue window",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"\",\n    \"start\": \"\",\n    \"end\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/venues/risky",
							"host": [
								"{{api}}"
							],
							"path": [
								"venues",
								"risky"
							]
						},
						"description": "If either start or end aren't changing you don't need pass them in, the API will use whatever is already stored."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cadca9e4-8ec8-4df8-a7ce-7ea1415a3be0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2eeab280-2c8e-4d0f-9d9d-4919db3634c1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}